<?xml version="1.0" encoding="utf-8" standalone="yes"?>
<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom">
  <channel>
    <title>Posts on command not found:</title>
    <link>/posts/</link>
    <description>Recent content in Posts on command not found:</description>
    <generator>Hugo -- gohugo.io</generator>
    <language>ja</language>
    <lastBuildDate>Fri, 11 Dec 2020 07:18:38 +0900</lastBuildDate>
    
	<atom:link href="/posts/index.xml" rel="self" type="application/rss+xml" />
    
    
    <item>
      <title>Promxy を使ったアーキテクチャ</title>
      <link>/posts/promxy-architecture/</link>
      <pubDate>Fri, 11 Dec 2020 07:18:38 +0900</pubDate>
      
      <guid>/posts/promxy-architecture/</guid>
      <description>さくらインターネット Advent Calendar 2020 11日目の記事になります。
「さくらの専用サーバ PHY」にてメトリクス保存・公開の基盤を担当している者です。 アプリケーション、サーバー、ネットワーク機器などのメトリクスを保存・公開する基盤として Prometheus を利用しています。 Prometheus にあるメトリクスを使い、 ユーザーにトラフィックグラフを提供したり、 自分達がシステムの異常に気が付くための監視を構成しています。
Prometheus のメトリクスを利用するにあたり、抱えていた2つの課題を Promxy を利用することによって解決することができ、 そこに至るまで、どのように考え、 どのようなアーキテクチャをとったのか、これからどうしていこうと考えているのかについて書きました。
ユーザーにトラフィックグラフを提供する 「さくらの専用サーバ PHY」のコントロールパネルにてトラフィックグラフを提供しており、 値は Prometheus に保存されているメトリクスを使っています。 ユーザーにトラフィックグラフのサービスを提供するにあたり、 インフラ側の可用性を上げるための構成を考え、実装する必要がありました。
Prometheus での高可用性 2台の Prometheus を動かし同じメトリクスを取得させるというのが公式の見解となっています。
https://prometheus.io/docs/introduction/faq/#can-prometheus-be-made-highly-available
ロードバランサを使った構成 Prometheus 公式の構成で、ロードバランサをエンドポイントにしてバックエンドに2台の Prometheus がいるという構成をとったとして、どうなるかを考えてみました。
この構成では、どちらからの Prometheus が一定時間落ちて復帰した場合、 保存しているメトリクスの対称性が失われてしまい、 エンドポイントにリクエストするごとに返ってくるメトリクスの結果が異なってしまうという状態がが発生するなと考え、採用を見送りました。
ロードバランサと Promxy を組み合わせた構成 Promxy は、メトリクスを Aggregate する機能を持っています。 Prometheus のセットが同じタイミングで落ちない限りは、 対称性の失われた Prometheus のセットに対して、 欠損することなくメトリクスを返すことができるため、 Promxy を使ったこちらの構成を採用しました。
アラートルールの管理 サービスの利用者が増えれば、利用される機器も増え、取得するメトリクスも線形に増加していきます。 1台の Prometheus 取得できるメトリクスには限界があり、 「さくらの専用サーバ PHY」で扱っている全てのメトリクスは管理できません。 Prometheus を複数台運用することが前提となります。 Prometheus のメトリクスを使ったアラート発報のためのアラートルールをどのように管理していくのかという問題に当たりました。</description>
    </item>
    
    <item>
      <title>cowbuilder</title>
      <link>/posts/cowbuilder/</link>
      <pubDate>Wed, 30 Sep 2020 00:27:00 +0900</pubDate>
      
      <guid>/posts/cowbuilder/</guid>
      <description>仕事で様々なバージョンの Debian パッケージを作らなければならなかったとき、 環境を用意するコストがとても低くて重宝した。
% apt-get install cowbuilder chroot 環境の作成
% cowbuilder --create --distribution buster --architecture amd64 --basepath /var/cache/pbuilder/buster64.cow chroot 環境へのログイン
# cowbuilder --login --basepath /var/cache/pbuilder/buster64.cow &amp;ndash;save オプションを付けると chroot 環境への変更を保存できる。
% cowbuilder --login --save --basepath /var/cache/pbuilder/buster64.cow bind mount
% cowbuilder --login --save --bindmount /home/workdir --basepath /var/cache/pbuilder/buster64.cow 下記を実行し、作成した chroot 環境をまとめて更新していた。
% for a in /var/cache/pbuilder/*.cow; do cowbuilder --update --basepath $a; done </description>
    </item>
    
    <item>
      <title>LXC</title>
      <link>/posts/lxc/</link>
      <pubDate>Tue, 29 Sep 2020 17:50:53 +0900</pubDate>
      
      <guid>/posts/lxc/</guid>
      <description>$ uname -srv Linux 4.19.0-9-amd64 #1 SMP Debian 4.19.118-2+deb10u1 (2020-06-07) $ cat /etc/debian_version 10.4 依存関係でいろいろ入ってしまうけれども iptables, dnsmasq, bridge-utils それぞれを操作するのが面倒なので、 virsh (1) で全てよしなにやってもらうことにした。
% apt-get install libvirt-clients libvirt-daemon-system dnsmasq bridge-utils % virsh net-list Name State Autostart Persistent -------------------------------------------- default active no yes $ ip addr show virbr0 3: virbr0: &amp;lt;BROADCAST,MULTICAST,UP,LOWER_UP&amp;gt; mtu 1500 qdisc noqueue state UP group default qlen 1000 link/ether 52:54:00:75:2f:a9 brd ff:ff:ff:ff:ff:ff inet 192.168.122.1/24 brd 192.168.122.255 scope global virbr0 valid_lft forever preferred_lft forever LXC インストール</description>
    </item>
    
    <item>
      <title>chroot &#43; OverlayFS</title>
      <link>/posts/chroot-overlayfs/</link>
      <pubDate>Mon, 28 Sep 2020 22:59:31 +0900</pubDate>
      
      <guid>/posts/chroot-overlayfs/</guid>
      <description>出番がないかもしれないが、 OverlayFS で chroot 環境をクリーンに保つをやってみた。
$ uname -srv Linux 4.19.0-9-amd64 #1 SMP Debian 4.19.118-2+deb10u1 (2020-06-07) $ cat /etc/debian_version 10.4 % debootstrap buster ./buster64 http://ftp.jp.debian.org/debian OverlayFS でのマウントについては mount (8) を参照
% mkdir upper workdir % mount -t overlay overlay -o lowerdir=./buster64,upperdir=./upper,workdir=./workdir ./buster64 % df ファイルシス 1K-ブロック 使用 使用可 使用% マウント位置 udev 2005984 0 2005984 0% /dev tmpfs 404160 5436 398724 2% /run /dev/vda3 99016264 2958444 91008396 4% / tmpfs 2020792 0 2020792 0% /dev/shm tmpfs 5120 0 5120 0% /run/lock tmpfs 2020792 0 2020792 0% /sys/fs/cgroup overlay 99016264 2958444 91008396 4% /root/buster64 % mount --rbind /dev .</description>
    </item>
    
    <item>
      <title>OpenConnect</title>
      <link>/posts/openconnect/</link>
      <pubDate>Thu, 04 Apr 2019 01:27:45 +0900</pubDate>
      
      <guid>/posts/openconnect/</guid>
      <description>GlobalProtect で VPN 接続する機会があり、 Mac も Windows も持っていないのでどうしたものかと調べていたところ、 OpenConnect というソフトウェアで GlobalProtect に VPN 接続することができることを知ったので記録として残しておく。 OpenConnect の開発者と Debian パッケージのメンテナーありがとう。
openconnect
https://packages.debian.org/ja/sid/openconnect
環境 $ lsb_release -a No LSB modules are available. Distributor ID: Debian Description: Debian GNU/Linux buster/sid Release: unstable Codename: sid $ uname -a Linux koyomi 4.19.0-4-amd64 #1 SMP Debian 4.19.28-2 (2019-03-15) x86_64 GNU/Linux fchu@koyomi:~$ lsb_release -a No LSB modules are available. Distributor ID: Debian Description: Debian GNU/Linux buster/sid Release: unstable Codename: sid $ apt-cache show openconnect Package: openconnect Version: 8.</description>
    </item>
    
    <item>
      <title>HUGO</title>
      <link>/posts/hugo/</link>
      <pubDate>Sat, 19 Jan 2019 21:47:42 +0900</pubDate>
      
      <guid>/posts/hugo/</guid>
      <description>debian-devel-changes のメーリングリストを眺めていたら、 HUGO という Site Generator を見付けた。 数年前にブログ環境を消失してから、ブログを書く気力が無くなってしまっていたが、HUGO を使い Github Pages にブログを書くことを再開しようと思う。
debian-devel-changes
https://lists.debian.org/debian-devel-changes/
HUGO
https://gohugo.io/
HUGO の Debian パッケージ
https://packages.debian.org/sid/hugo
実行環境 $ lsb_release -a No LSB modules are available. Distributor ID: Debian Description: Debian GNU/Linux buster/sid Release: unstable Codename: sid $ uname -a Linux koyomi 4.19.0-4-amd64 #1 SMP Debian 4.19.28-2 (2019-03-15) x86_64 GNU/Linux インストール # apt-get install hugo バージョン $ hugo version Hugo Static Site Generator v0.54.0/extended linux/amd64 BuildDate: 2019-02-01T18:13:18Z ブログのような形式で情報が並ぶと目的の情報に辿り着くまでがしんどかったので、 タグも日時も表示されず、単一のページにタイトルだけがずらっと並び、 そこを Ctrl + f で検索するような、とにかくシンプルなテーマを探し、下記を見付けた。</description>
    </item>
    
  </channel>
</rss>